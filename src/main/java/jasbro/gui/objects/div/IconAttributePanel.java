/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jasbro.gui.objects.div;

import jasbro.game.character.attributes.Attribute;
import jasbro.game.character.attributes.BaseAttributeTypes;
import jasbro.gui.DelegateMouseListener;
import jasbro.texts.TextUtil;

import java.awt.Font;
import java.awt.FontMetrics;

import javax.swing.SwingConstants;

import com.jgoodies.forms.layout.ColumnSpec;
import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.RowSpec;

/**
 *
 * @author Azrael
 */
public class IconAttributePanel extends javax.swing.JPanel {
	private Attribute attribute;
	
	/**
	 * Creates new form AttributePanel
	 */
	public IconAttributePanel() {
		initComponents();
	}
	
	public IconAttributePanel(Attribute attribute) {
		this();
		this.attribute = attribute;
	}
	
	public Attribute getAttribute() {
		return attribute;
	}
	
	public void setAttribute(Attribute attribute) {
		this.attribute = attribute;
		attributeValue.setText(attribute.getValue()+"");
		attributeIcon.setImage(attribute.getIcon());
		
		int bonus = attribute.getBonus();
		String toolTip;
		Object attributes [] = {(int)attribute.getInternValue(), attribute.getMaxValue(), bonus};
		if (bonus == 0) {
			toolTip = attribute.getNameResolved() + " " +
					TextUtil.t("ui.attributetooltip", attributes);
		}
		else {
			toolTip = attribute.getNameResolved() + " " +
					TextUtil.t("ui.attributetooltip.bonus", attributes);
		}
		if (attribute.getAttributeType() == BaseAttributeTypes.COMMAND || 
				attribute.getAttributeType() == BaseAttributeTypes.OBEDIENCE) {
			int control = attribute.getCharacter().getControl();
			if (control > 0) {
				toolTip += "\n" + TextUtil.t("ui.controlGenerated", new Object[]{control});
			}
			else if (control < 0) {
				toolTip += "\n" + TextUtil.t("ui.controlUsed", new Object[]{-control});
			}
			
		}
		setToolTipText(TextUtil.htmlPreformatted(toolTip));
		
		if (attribute.getAttributeType() instanceof BaseAttributeTypes) {
			attributeIcon.setToolTipText(TextUtil.htmlPreformatted(toolTip + "\n" +
					((BaseAttributeTypes) attribute.getAttributeType()).getDescription()));
		}
	}
	
	
	public int getMaxFittingFontSize(Font font) {
		int minSize = 0;
		int maxSize = 40;
		int curSize = font.getSize();
		int width = attributeValue.getWidth();
		int height = attributeValue.getHeight();
		
		if (width != 0 && height != 0) {
			while (maxSize - minSize > 1) {
				font = font.deriveFont((float) curSize);
				FontMetrics fm = getFontMetrics(font);
				int fontWidth = fm.stringWidth(attributeValue.getText());
				int fontHeight = fm.getAscent() + fm.getLeading();
				
				if ((fontWidth >= width) || (fontHeight >= height)) {
					maxSize = curSize;
					curSize = (maxSize + minSize) / 2;
				} else {
					minSize = curSize;
					curSize = (minSize + maxSize) / 2;
				}
			}
		}
		
		return minSize;
	}
	
	
	@Override
	public void setFont(Font font) {
		super.setFont(font);
		if (attributeValue != null) {
			attributeValue.setFont(font);
		}
	}
	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		
		attributeIcon = new jasbro.gui.objects.div.MyImage();
		attributeIcon.setCentered(true);
		attributeValue = new javax.swing.JLabel();
		attributeValue.setOpaque(false);
		attributeValue.setFont(attributeValue.getFont().deriveFont(attributeValue.getFont().getSize() + 5f));
		attributeValue.setHorizontalAlignment(SwingConstants.CENTER);
		setFont(attributeValue.getFont());
		
		setOpaque(false);
		FormLayout layout = new FormLayout(new ColumnSpec[] {
				ColumnSpec.decode("1dlu:grow"),
				ColumnSpec.decode("1dlu:grow"),},
				new RowSpec[] {
				RowSpec.decode("1dlu:grow"),});
		setLayout(layout);
		layout.setColumnGroups(new int[][]{ {1, 2}});
		
		add(attributeIcon, "1, 1, fill, fill");
		
		attributeValue.setText(" ");
		add(attributeValue, "2, 1, fill, fill");
		DelegateMouseListener listener = new DelegateMouseListener();
		addMouseMotionListener(listener);
		addMouseListener(listener);
		attributeIcon.addMouseListener(listener);
		attributeIcon.addMouseMotionListener(listener);
		
	}// </editor-fold>//GEN-END:initComponents
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private jasbro.gui.objects.div.MyImage attributeIcon;
	private javax.swing.JLabel attributeValue;
	// End of variables declaration//GEN-END:variables
}