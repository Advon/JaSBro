/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jasbro.util;

import java.awt.Component;
import java.awt.GridLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.ListCellRenderer;
import javax.swing.ToolTipManager;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import javax.swing.plaf.basic.BasicComboBoxRenderer;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.jgoodies.forms.factories.FormFactory;
import com.jgoodies.forms.layout.ColumnSpec;
import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.RowSpec;

import jasbro.Jasbro;
import jasbro.game.character.CharacterBase;
import jasbro.game.character.CharacterFileLoader;
import jasbro.gui.objects.div.MyImage;
import jasbro.gui.pictures.ImageData;
import jasbro.gui.pictures.ImageUtil;
import jasbro.util.enemyEditor.EnemyEditorPanel;

/**
 *
 * @author Azrael
 */
public class CharacterEditor extends JFrame implements EditorInterface {
	private final static Logger log = LogManager.getLogger(CharacterEditor.class);
	
	private CharacterDataEditorPanel attributeEditorPanel;
	private JList<CharacterBase> characterList;
	private JTextField characterNameField;
	private ImageTagEditor imageTagEditor;
	private ImageListPanel imageListPanel;
	
	private List<CharacterBase> characters;
	private CharacterBase currentCharacter;
	private ImageData currentImage;
	private MyImage imageDisplay;
	private JFileChooser fileChooser;
	
	private boolean warningDisplayed = false;
	
	private JTabbedPane tabbedPane;
	private JPanel characterEditorPanel;
	
	/**
	 * Creates new form CharacterEditor
	 */
	public CharacterEditor() {
		Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
			public void uncaughtException(Thread t, Throwable e) {
				log.error("Uncaught Exception", e);
			}
		});
		ToolTipManager.sharedInstance().setDismissDelay(10000);
		ToolTipManager.sharedInstance().setInitialDelay(100);
		
		setExtendedState(getExtendedState() | JFrame.MAXIMIZED_BOTH);
		CharacterFileLoader loader = CharacterFileLoader.getInstance();
		characters = loader.loadAllCharacters(true);
		Collections.sort(characters, new Comparators.CharacterBaseFolderComparator());
		Jasbro.getInstance().setCharacterBases(characters);
		
		initComponents();
		
		characterList.setCellRenderer(new ListCellRenderer<CharacterBase>() {
			private BasicComboBoxRenderer renderer = new BasicComboBoxRenderer();
			@Override
			public Component getListCellRendererComponent(JList<? extends CharacterBase> list, CharacterBase value, int index,
					boolean isSelected, boolean cellHasFocus) {
				BasicComboBoxRenderer component = (BasicComboBoxRenderer)renderer.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
				component.setText(value.getId());
				return component;
			}
		});
		
		characterList.setSelectedValue(characters.get(0), true);
		repaint();
	}
	
	public void changeCurrentImage(ImageData image) {
		try {
			currentImage = image;
			imageTagEditor.setImage(image, currentCharacter);
			imageDisplay.setImage(image);
			repaint();
		}catch (Exception e) {
			log.error("Error on changing image", e);
		}
	}
	
	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	private void initComponents() {
		getContentPane().setLayout(new GridLayout(1, 1, 0, 0));
		tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		getContentPane().add(tabbedPane);
		characterEditorPanel = new JPanel();
		tabbedPane.addTab("Characters", null, characterEditorPanel, null);
		tabbedPane.addTab("Enemies", null, new EnemyEditorPanel(), null);
		
		
		java.awt.GridBagConstraints gridBagConstraints;
		
		JSplitPane jSplitPane1 = new javax.swing.JSplitPane();
		JPanel jPanel3 = new javax.swing.JPanel();
		characterNameField = new javax.swing.JTextField();
		JButton createCharacterButton = new javax.swing.JButton();
		JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
		characterList = new javax.swing.JList<CharacterBase>();
		imageListPanel = new ImageListPanel(this);
		
		JButton addImageButton = new javax.swing.JButton();
		JButton deleteImageButton = new javax.swing.JButton();
		JSplitPane jSplitPane2 = new javax.swing.JSplitPane();
		JPanel jPanel1 = new javax.swing.JPanel();
		JSplitPane jSplitPane3 = new javax.swing.JSplitPane();
		jSplitPane3.setDividerLocation(500);
		imageTagEditor = new jasbro.util.ImageTagEditor(this);
		attributeEditorPanel = new jasbro.util.CharacterDataEditorPanel();
		
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				try {
					super.windowClosing(e);
					saveCharacter();
					dispose();
					
					Thread.sleep(1000);
				} catch (InterruptedException e1) {
				} catch (IOException e1) {
					log.error("Failed to save character on window exit", e1);
				}
				finally {
					System.exit(0);
				}
			}
		});
		setTitle("Character Editor");
		characterEditorPanel.setLayout(new java.awt.GridBagLayout());
		jPanel3.setLayout(new FormLayout(new ColumnSpec[] {
				ColumnSpec.decode("default:grow"),
				ColumnSpec.decode("default:grow"),},
				new RowSpec[] {
				FormFactory.DEFAULT_ROWSPEC,
				RowSpec.decode("default:grow(2)"),
				FormFactory.DEFAULT_ROWSPEC,
				RowSpec.decode("default:grow(3)"),
				FormFactory.DEFAULT_ROWSPEC,}));
		jPanel3.add(characterNameField, "1, 1, fill, center");
		
		createCharacterButton.setText("Create Character");
		createCharacterButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				createCharacterButtonActionPerformed(evt);
			}
		});
		jPanel3.add(createCharacterButton, "2, 1, center, center");
		
		jScrollPane1.setDoubleBuffered(true);
		jScrollPane1.setMinimumSize(new java.awt.Dimension(1, 1));
		jScrollPane1.setPreferredSize(new java.awt.Dimension(1, 1));
		
		characterList.setModel(new MyAbstractListModel() {
			public int getSize() {
				return characters.size();
			}
			
			public CharacterBase getElementAt(int i) {
				return characters.get(i);
			}
			
		});
		characterList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		characterList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
			public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
				characterListValueChanged(evt);
			}
		});
		jScrollPane1.setViewportView(characterList);
		
		jPanel3.add(jScrollPane1, "1, 2, 2, 1, fill, fill");
		jPanel3.add(imageListPanel, "1, 4, 2, 1, fill, fill");
		
		
		addImageButton.setText("Add Images");
		addImageButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addImageButtonActionPerformed(evt);
			}
		});
		jPanel3.add(addImageButton, "1, 5, left, top");
		
		deleteImageButton.setText("Delete Image");
		deleteImageButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				deleteImageButtonActionPerformed(evt);
			}
		});
		jPanel3.add(deleteImageButton, "2, 5, left, top");
		
		jSplitPane1.setLeftComponent(jPanel3);
		
		jSplitPane2.setDividerLocation(500);
		jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
		jSplitPane2.setResizeWeight(0.7);
		jSplitPane2.setDoubleBuffered(true);
		
		jPanel1.setPreferredSize(new java.awt.Dimension(1, 1));
		jPanel1.setLayout(new java.awt.GridBagLayout());
		
		imageDisplay = new MyImage();
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		jPanel1.add(imageDisplay, gridBagConstraints);
		
		jSplitPane2.setTopComponent(jPanel1);
		
		jSplitPane3.setMinimumSize(new java.awt.Dimension(1, 1));
		jSplitPane3.setPreferredSize(new java.awt.Dimension(1, 1));
		
		jSplitPane3.setLeftComponent(imageTagEditor);
		imageTagEditor.setImageList(imageListPanel.getImageList());
		jSplitPane3.setRightComponent(attributeEditorPanel);
		
		jSplitPane2.setRightComponent(jSplitPane3);
		
		jSplitPane1.setRightComponent(jSplitPane2);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		characterEditorPanel.add(jSplitPane1, gridBagConstraints);
		
		pack();
	}// </editor-fold>//GEN-END:initComponents
	
	public javax.swing.JList<ImageData> getImageList() {
		return imageListPanel.getImageList();
	}
	
	private void characterListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_characterListValueChanged
		setCurrentCharacter(characterList.getSelectedValue());
	}
	
	private void setCurrentCharacter(CharacterBase character) {
		if (currentCharacter != null) {
			try {
				saveCharacter();
			} catch (IOException e) {
				log.error("Faield to save character", e);
			}
		}
		
		
		try {
			currentCharacter = CharacterFileLoader.getInstance().loadCharacter(character.getFolder());
		} catch (IOException e) {
			log.error("Failed to load character from folder '{}'", character.getFolder().toString());
			log.throwing(e);
		}
		
		attributeEditorPanel.setCharacter(currentCharacter);
		imageListPanel.setImageObject(currentCharacter);
		changeCurrentImage(currentCharacter.getImages().get(0));
		
		if (!warningDisplayed && currentCharacter.getFolder().isArchive()) {
			JOptionPane.showMessageDialog(this, "Attention! Editing characters as zip-files is discouraged, since file access from another source (e.g. a running Jasbro game, dropbox, etc.), may lead to the loss of the zip file.");
		}
	}
	
	
	private void deleteImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteImageButtonActionPerformed
		if (imageListPanel.getImageList().getSelectedValue() != null && currentCharacter.getImages().size() > 1) {
			CharacterFileLoader.getInstance().deletePicture(currentImage);
			currentCharacter.getImages().remove(currentImage);
			
			int newIndex = imageListPanel.getImageList().getSelectedIndex();
			if (newIndex >= imageListPanel.getImageList().getModel().getSize()) {
				changeCurrentImage(imageListPanel.getImageList().getModel().getElementAt(imageListPanel.getImageList().getModel().getSize()-1));
			}
			else {
				changeCurrentImage(imageListPanel.getImageList().getModel().getElementAt(newIndex));
			}
			imageListPanel.filter();
		}
	}//GEN-LAST:event_deleteImageButtonActionPerformed
	
	private void addImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addImageButtonActionPerformed
		if (fileChooser == null) {
			fileChooser = new JFileChooser();
			fileChooser.setMultiSelectionEnabled(true);
			fileChooser.setAcceptAllFileFilterUsed(false);
			fileChooser.addChoosableFileFilter(new FileFilter() {
				@Override
				public String getDescription() {
					return "Images";
				}
				
				@Override
				public boolean accept(File f) {
					if (f.isDirectory() || ImageUtil.getInstance().isImage(f.toPath())) {
						return true;
					}
					else {
						return false;
					}
				}
			});
		}
		
		int returnval = fileChooser.showOpenDialog(this);
		if (returnval == JFileChooser.APPROVE_OPTION) {
			CharacterFileLoader.getInstance().addImages(currentCharacter, fileChooser.getSelectedFiles());
			imageListPanel.filter();
		}
		
	}//GEN-LAST:event_addImageButtonActionPerformed
	
	private void createCharacterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCharacterButtonActionPerformed
		CharacterBase characterBase = CharacterFileLoader.getInstance().createCharacter(characterNameField.getText(), characters);
		if (characterBase != null) {
			try {
				CharacterFileLoader.getInstance().saveCharacter(currentCharacter);
			} catch (IOException e) {
				log.error("Failed to create character", e);
			}
			characterList.setSelectedIndex(characters.size()-1);
			((MyAbstractListModel)characterList.getModel()).update(this, 0, currentCharacter.getImages().size()-1);
		}
	}
	
	
	
	public void saveCharacter() throws IOException {
		if (currentCharacter != null) {
			if (currentCharacter.isChanged()) {
				CharacterFileLoader.getInstance().saveCharacter(currentCharacter);
			}
		}
	}
	
	public void setNoImageSelected(boolean on) {
		imageTagEditor.setEnabled(! on);
		if (on) {
			imageDisplay.setImage(null);
		}
		repaint();
	}
	
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
					new CharacterEditor().setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
}