apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'distribution'

sourceCompatibility = 1.7
version = '0.1.3'

eclipse {
	classpath {
		// Have gradle pull down the Javadocs for dependencies
		downloadJavadoc = true
	}
}


repositories {
	mavenCentral()
	// SpringSource has a JAI implementation on their Maven repo
	// maven {
	//	url 'http://repository.springsource.com/maven/bundles/external'
	// }
}

dependencies {
	compile group: 'org.beanshell', name: 'bsh-classgen', version: '2.0b4'
	compile group: 'com.jgoodies', name: 'forms', version: '1.2.1'
	compile group: 'com.google.guava', name: 'guava', version: '14.0.1'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.2'
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.3'
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.3'
	compile group: 'com.miglayout', name: 'miglayout', version: '3.7.4', classifier: 'swing'
	compile group: 'org.antlr', name: 'ST4', version: '4.0.7'
	compile (group: 'net.java.truevfs', name: 'truevfs-profile-default', version: '0.10.6', classifier: 'shaded') {
		exclude module: 'truevfs-profile-base'
		exclude module: 'truevfs-driver-http'
		exclude module: 'truevfs-driver-tar'
		exclude module: 'truevfs-driver-tar-bzip2'
		exclude module: 'truevfs-driver-tar-gzip'
		exclude module: 'truevfs-driver-tar-xz'
		exclude module: 'slf4j-api'
	}
	compile group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.7'
	compile group: 'org.imgscalr', name: 'imgscalr-lib', version: '4.2'
	testCompile group: 'junit', name: 'junit', version: '4.+'
}

// Copies all of the runtime dependencies into the lib folder
task createLib(type: Copy) {
	into "$buildDir/libs/lib"
	from configurations.runtime
}

// Creates Jasbro.jar with classpath pointing to ./lib/*
task jasbroJar(type: Jar, dependsOn: classes) {
	archiveName 'JaSBro.jar'
	from sourceSets.main.output
    manifest {
        attributes 'Implementation-Title': 'JaSBro'
        attributes 'Implementation-Version': version
        attributes 'Main-Class': 'jasbro.Jasbro'
        attributes 'Class-Path': configurations.runtime.collect { "./lib/${it.name}" }.join(' ')
    }
}

// Creates ItemEditor.jar with classpath pointing to ./lib/*
task itemJar(type: Jar, dependsOn: classes) {
	archiveName 'ItemEditor.jar'
	from sourceSets.main.output
    manifest {
        attributes 'Implementation-Title': 'Item Editor'
        attributes 'Implementation-Version': version
        attributes 'Main-Class': 'jasbro.util.itemEditor.ItemEditor'
        attributes 'Class-Path': configurations.runtime.collect { "./lib/${it.name}" }.join(' ')
    }
}

// Creates CharacterEditor.jar with classpath pointing to ./lib/*
task charJar(type: Jar, dependsOn: classes) {
	archiveName 'CharacterEditor.jar'
	from sourceSets.main.output
    manifest {
        attributes 'Implementation-Title': 'Character Editor'
        attributes 'Implementation-Version': version
        attributes 'Main-Class': 'jasbro.util.CharacterEditor'
        attributes 'Class-Path': configurations.runtime.collect { "./lib/${it.name}" }.join(' ')
    }
}

// Creates EventEditor.jar with classpath pointing to ./lib/*
task eventJar(type: Jar, dependsOn: classes) {
	archiveName 'EventEditor.jar'
	from sourceSets.main.output
    manifest {
        attributes 'Implementation-Title': 'Event Editor'
        attributes 'Implementation-Version': version
        attributes 'Main-Class': 'jasbro.util.eventEditor.EventEditor'
        attributes 'Class-Path': configurations.runtime.collect { "./lib/${it.name}" }.join(' ')
    }
}

// Convenience task to create all JARs and lib folder
task jasbroAll {
	dependsOn(createLib)
	dependsOn(jasbroJar)
	dependsOn(itemJar)
	dependsOn(charJar)
	dependsOn(eventJar)
}

task jasbroZip (type: Zip){
	dependsOn(jasbroAll)

	from(".") {
		include "characters/**"
		include "events/**"
		include "images/**"
		include "items/**"
		include "npcs/**"
		include "quests/**"
		include "fameUnlocks.xml"
		include "rooms.xml"
	}
	from "$buildDir/libs"
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}
